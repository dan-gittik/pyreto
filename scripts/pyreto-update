#!/bin/bash

set -e
while [ "$(basename "$(realpath ..)")" != "pyreto" ]
do
    if [ $PWD == "/" ]
    then
        error "Not a pyreto project"
    fi
    cd ..
done

DEV_DIR="$(pwd)"
NAME="$(basename "$DEV_DIR")"
PROD_DIR="$(realpath "$(dirname "${BASH_SOURCE[0]}")/../.prod/pyreto-$NAME")"
VENV_DIR="$(realpath "$(dirname "${BASH_SOURCE[0]}")/../.venv")"
PYTHON2="$VENV_DIR/2/bin/python"
PYTHON3="$VENV_DIR/3/bin/python"
REPO_URL="git@github.com:dan-gittik/pyreto-$NAME.git"
AUTHOR="Dan Gittik"
EMAIL="dan.gittik@gmail.com"
README_FILE="README.md"
VERSION_FILE="VERSION.txt"
LICENSE_FILE="LICENSE.txt"
REQUIREMENTS_FILE="requirements.txt"

function pyreto-update() {
    echo "Updating $NAME"
    echo "  Source: $DEV_DIR"
    echo "  Target: $PROD_DIR"

    validate-dev-dir
    get-or-create-prod-dir
    update-version
    update-prod-dir
    run-tests
    confirm-upload
    upload-to-github
    upload-to-pypi
}

function error() {
    echo -e "\x1b[31mERROR: $1\x1b[0m"
    exit 1
}

function validate-dev-dir() {
    require-file "$README_FILE"
    require-file "$VERSION_FILE"
    require-file "$REQUIREMENTS_FILE"
    require-commit
}

function require-file() {
    if ! [ -f "$DEV_DIR/$1" ]
    then
        error "Missing $1"
    fi
}

function require-commit() {
    if [ -n "$(git -C "$DEV_DIR" status --porcelain | grep "$NAME")" ]
    then
        error "Uncommited changes"
    fi
}

function get-or-create-prod-dir() {
    if ! [ -d "$PROD_DIR" ]
    then
        git clone "$REPO_URL" "$PROD_DIR"
        if ! [ -f "$PROD_DIR/$README_FILE" ]
        then
            create-prod-dir
        fi
    fi
}

function create-prod-dir() {
    reset-repo
    create-license
    create-setup
    create-gitignore
}

function reset-repo() {
    rm -rf "$PROD_DIR/.git"
    git init "$PROD_DIR"
    git -C "$PROD_DIR" remote add origin "$REPO_URL"
}

function create-license() {
    cat > "$PROD_DIR/$LICENSE_FILE" <<EOF
Copyright $(date +'%Y') $AUTHOR ($EMAIL)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
EOF
}

function create-setup() {
    cat > "$PROD_DIR/setup.py" <<EOF
import os
import setuptools


def read(name):
    with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), name)) as reader:
        return reader.read()


package = dict(
    name = 'pyreto-$NAME',
    version = read('$VERSION_FILE'),
    author = '$AUTHOR',
    author_email = '$EMAIL',
    description = next(line for line in read('$README_FILE').splitlines() if line.strip() and not line.startswith('#')),
    long_description = read('$README_FILE'),
    license = 'MIT',
    url = 'https://github.com/dan-gittik/$NAME',
    classifiers = [
        'License :: OSI Approved :: MIT License',
        'Programming Language :: Python',
        'Programming Language :: Python :: 2',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: Implementation :: CPython',
        'Programming Language :: Python :: Implementation :: PyPy'
    ],
    packages = setuptools.find_packages(),
    install_requires = read('$REQUIREMENTS_FILE').splitlines(),
    tests_require = ['pytest'],
)


if __name__ == '__main__':
	setuptools.setup(**package)
EOF
}

function create-gitignore() {
    cat > "$PROD_DIR/.gitignore" <<EOF
*.pyc
__pycache__/
.pytest_cache/
build/
dist/
*.egg-info/
EOF
}

function update-version() {
    if ! "$PYTHON3" -c "
import sys

with open('$DEV_DIR/$VERSION_FILE') as reader:
    major, minor, fix = reader.read().split('.')

v1 = '{}.{}.{}'.format(major, minor, int(fix)+1)
v2 = '{}.{}.{}'.format(major, int(minor)+1, 0)
v3 = '{}.{}.{}'.format(int(major)+1, 0, 0)
versions = {'1': v1, '2': v2, '3': v3}

sys.stdout.write('''Please select version:
[1] {} (default)
[2] {}
[3] {}
>>> '''.format(v1, v2, v3))
sys.stdout.flush()

selected = sys.stdin.readline().strip()
if not selected:
    selected = '1'

if selected not in versions:
    exit(1)

with open('$DEV_DIR/$VERSION_FILE', 'w') as writer:
    writer.write(versions[selected])
"
then
    error "Invalid version"
fi
}

function update-prod-dir() {
    copy-files
    collect-code
    collect-tests
}


function copy-files() {
    cp -a "$DEV_DIR"/. "$PROD_DIR"
}

function collect-code() {
    if ! [ -d "$PROD_DIR/pyreto" ]
    then
        mkdir "$PROD_DIR/pyreto"
        touch "$PROD_DIR/pyreto/__init__.py"
    fi
    mv "$PROD_DIR/$NAME"* "$PROD_DIR/pyreto"
}

function collect-tests() {
    if ! [ -d "$PROD_DIR/tests" ]
    then
        mkdir "$PROD_DIR/tests"
        mv "$PROD_DIR/test_"* "$PROD_DIR/tests"
    fi
}

function run-tests() {
    cd "$PROD_DIR"
    if ! "$PYTHON2" -m pytest tests
    then
        exit 1
    fi
    if ! "$PYTHON3" -m pytest tests
    then
        exit 1
    fi
}

function confirm-upload() {
    read -r -p "Upload project? [Y/n] " response
    [[ $response =~ ^[N,n]$ ]] && exit
}

function upload-to-github() {
    tag-dev-repo
    push-to-prod-repo
}

function tag-dev-repo() {
    local VERSION="$(cat "$DEV_DIR/$VERSION_FILE")"
    local TAG="$NAME-v$VERSION"
    git -C "$DEV_DIR" add "$DEV_DIR"
    git -C "$DEV_DIR" commit -m "Updated $NAME to version $VERSION."
    git -C "$DEV_DIR" tag -f "$TAG"
    git -C "$DEV_DIR" push origin "$TAG"
}

function push-to-prod-repo() {
    local VERSION="$(cat "$DEV_DIR/$VERSION_FILE")"
    git -C "$PROD_DIR" add "$PROD_DIR"
    git -C "$PROD_DIR" commit -m "Updated to version $VERSION."
    git -C "$PROD_DIR" push origin master
}

function upload-to-pypi() {
    create-dist-files
    upload-with-twine
}

function create-dist-files() {
    cd "$PROD_DIR"
    "$PYTHON3" setup.py sdist
    "$PYTHON2" setup.py bdist_wheel
    "$PYTHON3" setup.py bdist_wheel
}

function upload-with-twine() {
    "$PYTHON3" -m twine upload "$PROD_DIR/dist/"*
}

pyreto-update
